#!/usr/bin/env python3
"""
ZigStar CC2538 Flasher for Home Assistant
Flashing Z-Stack firmware to ZigStar CC2538 devices over the network
"""

import os
import sys
import time
import socket
import argparse
import subprocess
import requests
from pathlib import Path

def put_device_in_update_mode(device_ip, timeout=10):
    """Put the ZigStar device into ZigBee update mode"""
    try:
        url = f"http://{device_ip}/switch/zigbee_update/turn_on"
        print(f"Putting device into ZigBee update mode: {url}")
        
        response = requests.post(url, timeout=timeout)
        
        if response.status_code == 200:
            print("✓ Device successfully put into ZigBee update mode")
            return True
        else:
            print(f"✗ Failed to put device in update mode. Status: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"✗ Error putting device in update mode: {e}")
        return False

def wait_for_device_ready(device_ip, device_port, max_wait=30):
    """Wait for device to be ready for flashing"""
    print("Waiting for device to be ready for flashing...")
    
    start_time = time.time()
    while time.time() - start_time < max_wait:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            sock.connect((device_ip, int(device_port)))
            sock.close()
            print("✓ Device is ready for flashing")
            return True
        except Exception:
            print(f"  Waiting... ({int(time.time() - start_time)}s)")
            time.sleep(2)
    
    print("✗ Device not ready after waiting")
    return False

def create_telnet_connection(ip, port):
    """Create a telnet connection to the device"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        sock.connect((ip, int(port)))
        return sock
    except Exception as e:
        print(f"Failed to connect to {ip}:{port}: {e}")
        return None

def send_command(sock, command, timeout=5):
    """Send a command and wait for response"""
    try:
        sock.settimeout(timeout)
        sock.send(f"{command}\n".encode())
        time.sleep(0.5)
        
        response = b""
        while True:
            try:
                data = sock.recv(1024)
                if not data:
                    break
                response += data
            except socket.timeout:
                break
        
        return response.decode('utf-8', errors='ignore')
    except Exception as e:
        print(f"Error sending command '{command}': {e}")
        return ""

def flash_firmware(device_ip, device_port, firmware_path, baud_rate, erase_flash, verify_flash):
    """Flash firmware using cc2538-bsl tool"""
    try:
        # Check if firmware file exists
        if not os.path.exists(firmware_path):
            print(f"Firmware file not found: {firmware_path}")
            return False
        
        # Build cc2538-bsl command
        cmd = [
            "python3", "-m", "cc2538_bsl.cc2538_bsl",
            "-p", f"telnet://{device_ip}:{device_port}",
            "-b", baud_rate,
            "-f", firmware_path
        ]
        
        if erase_flash:
            cmd.append("-e")
        
        if verify_flash:
            cmd.append("-v")
        
        print(f"Executing: {' '.join(cmd)}")
        
        # Execute flashing
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("Firmware flashing completed successfully!")
            print("Output:", result.stdout)
            return True
        else:
            print("Firmware flashing failed!")
            print("Error:", result.stderr)
            return False
            
    except Exception as e:
        print(f"Error during firmware flashing: {e}")
        return False

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="ZigStar CC2538 Flasher")
    parser.add_argument("--device-ip", required=True, help="Device IP address")
    parser.add_argument("--device-port", default="23", help="Device port (default: 23)")
    parser.add_argument("--firmware", required=True, help="Path to firmware file")
    parser.add_argument("--baud-rate", default="115200", help="Baud rate (default: 115200)")
    parser.add_argument("--erase", action="store_true", help="Erase flash before writing")
    parser.add_argument("--verify", action="store_true", help="Verify flash after writing")
    parser.add_argument("--skip-prepare", action="store_true", help="Skip putting device in update mode")
    parser.add_argument("--wait-time", type=int, default=30, help="Maximum wait time for device readiness (default: 30s)")
    
    args = parser.parse_args()
    
    print("ZigStar CC2538 Flasher")
    print("=" * 30)
    print(f"Device: {args.device_ip}:{args.device_port}")
    print(f"Firmware: {args.firmware}")
    print(f"Baud Rate: {args.baud_rate}")
    print(f"Erase Flash: {args.erase}")
    print(f"Verify Flash: {args.verify}")
    print("=" * 30)
    
    # Step 1: Put device in ZigBee update mode (unless skipped)
    if not args.skip_prepare:
        print("\nStep 1: Preparing device for update...")
        if not put_device_in_update_mode(args.device_ip):
            print("Warning: Could not put device in update mode. Continuing anyway...")
        
        # Step 2: Wait for device to be ready
        print("\nStep 2: Waiting for device to be ready...")
        if not wait_for_device_ready(args.device_ip, int(args.device_port), args.wait_time):
            print("Error: Device not ready for flashing")
            sys.exit(1)
    else:
        print("\nSkipping device preparation step...")
    
    # Step 3: Test connection
    print("\nStep 3: Testing connection...")
    sock = create_telnet_connection(args.device_ip, int(args.device_port))
    if not sock:
        print("Connection failed. Please check device IP and port.")
        sys.exit(1)
    
    print("Connection successful!")
    sock.close()
    
    # Step 4: Flash firmware
    print("\nStep 4: Starting firmware flash...")
    success = flash_firmware(
        args.device_ip,
        args.device_port,
        args.firmware,
        args.baud_rate,
        args.erase,
        args.verify
    )
    
    if success:
        print("\n✓ Flashing completed successfully!")
        sys.exit(0)
    else:
        print("\n✗ Flashing failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
